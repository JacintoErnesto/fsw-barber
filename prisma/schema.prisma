generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  bookigs       Bookig[]
  reviews       Review[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Barbershop {
  id          String              @id @default(uuid())
  name        String
  address     String
  phones      String[]
  description String
  imageUrl    String
  createdAt   DateTime            @default(now())
  updatedAt   DateTime?
  services    BarbershopService[]
}

model BarbershopService {
  id           String     @id @default(uuid())
  name         String
  description  String
  imageUrl     String
  price        Decimal    @db.Decimal(10, 2)
  barbershopId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime?
  barbershop   Barbershop @relation(fields: [barbershopId], references: [id])
  bookigs      Bookig[]
  reviews      Review[]
}

model Bookig {
  id                String            @id @default(uuid())
  userId            String
  serviceId         String
  date              DateTime
  createdAt         DateTime          @default(now())
  updated           DateTime?
  barbershopService BarbershopService @relation(fields: [serviceId], references: [id])
  User              User              @relation(fields: [userId], references: [id])
}

model Review {
  id                String            @id @default(uuid())
  serviceId         String
  userId            String
  rating            Int
  barbershopService BarbershopService @relation(fields: [serviceId], references: [id])
  feedback          String
  createdAt         DateTime          @default(now())
  updated           DateTime?
  User              User              @relation(fields: [userId], references: [id])
}
